# -*- coding: utf-8 -*-
"""Wind_Turbine_Power_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1db5lZAD4n1uT54V8QhVAc4OFMHnWg2lp

![Wine Turbine](https://www.solarfeeds.com/mag/wp-content/uploads/2019/10/picspree-1256331.jpg)

Energi terbarukan, khususnya dari kincir angin, memainkan peran penting dalam transisi menuju sumber energi berkelanjutan. Dengan semakin meningkatnya kebutuhan energi dan kekhawatiran tentang perubahan iklim, penting untuk memanfaatkan teknologi yang ada untuk memprediksi dan mengoptimalkan hasil energi dari sumber ini.

Proyek ini bertujuan untuk menganalisis dan memprediksi energi yang dihasilkan oleh kincir angin menggunakan dataset yang berisi data SCADA (Supervisory Control and Data Acquisition) dari kincir angin di Turki pada tahun 2018.
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import tensorflow as tf

import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

import warnings
warnings.filterwarnings('ignore')

from sklearn.preprocessing import StandardScaler

from sklearn.model_selection import train_test_split, cross_val_score

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, mean_squared_error, r2_score

"""# Data Understanding

columns:
- Date/Time: Stempel waktu yang mencatat tanggal dan waktu pengukuran dengan interval 10 menit.
- LV ActivePower (kW): Energi yang dihasilkan turbin yang menjadi variabel target
- Wind Speed (m/s): Kecepatan angin yang digunakan turbin untuk menghasilkan listrik
- Wind Direction (degrees): Arah angin yang diukur dalam derajat, membantu dalam memahami bagaimana orientasi kincir angin sehingga berpengaruh terhadap efisiensi.
- Theoretical_Power_Curve (KWh): Prediksi energi yang dihasilkan turbin secara teoritis.

data source:
"""

data = pd.read_csv('wind_turbine_scada_dataset.csv')
data.head()

data.info()

data['Date/Time'] = pd.to_datetime(data['Date/Time'], format="%d %m %Y %H:%M")
data.info()

"""#### Missing Data"""

print(data.isna().sum())

"""#### Outlier"""

data.describe()

"""terlihat pada kolom LV ActivePower (kW) terdapat nilai yang anomali yaitu berupa bilangan negatif"""

sum(data["LV ActivePower (kW)"] < 0)

"""Dilakukan penggantian nilai menjadi 0 pada nilai yang negatif karena tidak mungkin pengukuran energi yang dihasilkan menghasilkan nilai negatif"""

data["LV ActivePower (kW)"] = data["LV ActivePower (kW)"].apply(lambda x: 0 if x < 0 else x)

data.describe()

"""#### Feature Engineering"""

# ekstraksi date/time ke hour, day, week, mounth
data['Week'] = data['Date/Time'].dt.isocalendar().week
data['Month'] = data['Date/Time'].dt.month
data['Hour'] = data['Date/Time'].dt.hour
data['Day'] = data['Date/Time'].dt.day
data.sample(3)

# Melihat musim
def get_season(month):
    if month in [12, 1, 2]:
        return 1 # Winter
    elif month in [3, 4, 5]:
        return 2 #Spring
    elif month in [6, 7, 8]:
        return 3 #Summer
    else:
        return 4 #Autumn

data['Season'] = data['Month'].apply(get_season)
data.sample(3)

"""##### Identifikasi siang/malam (Day/Night).

Berdasarkan data peta angin di Turki (https://globalwindatlas.info/en/area/Turkey), daerah yang memiliki kecepatan angin tinggi (lebih dari 10m/s), sesuai dengan data, yaitu daerah Izmir.

Untuk itu digunakan library Astral untuk mengetahui waktu terbit dan tenggelamnya matahari di lokasi Izmir dan menentukan siang dan malam.
"""

!pip install astral pytz

from astral import LocationInfo
from astral.sun import sun
import pytz

location = LocationInfo("Izmir", "Turkey", "Europe/Istanbul", 38.4192, 27.1287)
def day_or_night(dt):

    s = sun(location.observer, date=dt)
    sunrise = s['sunrise']
    sunset = s['sunset']
    dt = dt.tz_localize('Europe/Istanbul')
    if sunrise < dt < sunset:
            return 0 # Day
    else:
            return 1 # Night.
data['Day/Night'] = data['Date/Time'].apply(day_or_night)
data.head()

"""##### Temperature

Melalui prinsip **Energi Kinetik Angin** dengan rumus:
$$
   P{turbine} = \frac{1}{2} * ρAv^3
$$
Dimana:
- $  P{turbine} $ = daya yang dihasilkan oleh turbin angin.
- ρ = densitas udara (kg/m³).
- A = area penampang turbin (m²).
- v = kecepatan angin (m/s).

serta **Hukum Gas Ideal** dengan rumus:
$$
   ρ α \frac{1}{T}
$$
Dimana:
ρ = densitas udara (kg/m³).
T = suhu mutlak dalam Kelvin (K).


Maka dapat disimpulkan terdapat hubungan antara suhu, kecepatan angin, dan energi kinetik dari angin.   

Proses penghitungan dilakukan menggunakan library **meteostat** yang menyimpan data cuaca dan suhu.
"""

!pip install meteostat

from meteostat import Point, Hourly

location = Point(38.4192, 27.1287) #menggunakan data lokasi daerah Izmir
start = data['Date/Time'].min()
end = data['Date/Time'].max()

data_weather = Hourly(location, start, end)
data_weather = data_weather.fetch()
data_weather.index = data_weather.index.tz_localize(None)
#resample to 10 minute interval
data_weather = data_weather.resample('10min').ffill()
data_weather.reset_index(inplace=True)
data_weather = data_weather[['time','temp']]
data_weather = data_weather.rename(columns={'time': 'Date/Time', 'temp': 'Temperature (°C)'})
data_weather.head()

data = pd.merge(data, data_weather, on='Date/Time', how='left')
data.head()

print(data['Temperature (°C)'].isna().sum())

"""Dilakukan pengisian data yang hilang dengan cara interpolasi"""

data['Temperature (°C)'] = data['Temperature (°C)'].interpolate()

print(data['Temperature (°C)'].isna().sum())

"""#### EDA and Visualisasi"""

data.columns

observed_columns = ['LV ActivePower (kW)', 'Wind Speed (m/s)',
       'Theoretical_Power_Curve (KWh)', 'Wind Direction (°)', 'Temperature (°C)']

sns.pairplot(data[observed_columns])
plt.show()

data[observed_columns].hist(bins =20, figsize=(12,8))

"""##### box plot"""

for column in data.describe().columns:
    fig, ax = plt.subplots(1, 2, figsize=(12, 5))
    sns.histplot(data[column], ax=ax[0], color='green', kde=True)
    sns.boxplot(x=data[column], ax=ax[1])
    plt.show()

"""Terdapat outlier pada data kecepatan angin

##### features over time
"""

for column in observed_columns:
    plt.figure(figsize=(10, 6))
    plt.plot(data['Date/Time'], data[column])
    plt.xlabel('Date/Time')
    plt.ylabel(column)
    plt.title(f'{column} over Time')
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

"""##### Distribusi Energi yang dihasilkan"""

day_power = data.groupby('Day/Night')['LV ActivePower (kW)'].sum()
day_power.index = ['Day', 'Night']
day_power.sort_values(inplace=False, ascending=False)

plt.figure(figsize=(10, 5))
day_power.plot(kind='bar')
plt.title('Power Accumulation at Day and Night')
plt.xlabel('Day/Night')
plt.ylabel('Total Power (kW)')
plt.xticks(rotation=0)
plt.show()

"""Energi yang dihasilkan ketika malam cenderung lebih banyak secara akumulasi"""

month_power = data.groupby('Month')['LV ActivePower (kW)'].sum()
month_power.index = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
month_power.sort_values(inplace=False, ascending=False)

plt.figure(figsize=(10, 6))
month_power.plot(kind='bar')
plt.title('Power Accumulation by Month')
plt.xlabel('Month')
plt.ylabel('Total Power (kW)')
plt.xticks(rotation=0)
plt.show()

"""Bulan paling optimal dalam menghasilkan listrik yaitu Maret dan Agustus"""

season_power = data.groupby('Season')['LV ActivePower (kW)'].sum()
season_power.index = ['Winter', 'Spring', 'Summer', 'Autumn']
season_power.sort_values(inplace=False, ascending=False)

plt.figure(figsize=(10, 6))
season_power.plot(kind='bar')
plt.title('Power Accumulation by Season')
plt.xlabel('Season')
plt.ylabel('Total Power (kW)')
plt.xticks(rotation=0)
plt.show()

"""Energi yang paling banyak dihasilkan yaitu ketika musim gugur

##### Analisis kecepatan angin
"""

average_wind_speed = data.groupby(['Day/Night', 'Season', 'Month'])['Wind Speed (m/s)'].mean().unstack()
average_wind_speed

"""dapat dilihat pada waktu yang maksimal dalam menghasilkan energi, angin berhembus dengan kencang

Wind Speed (m/s) dan Theoretical_Power_Curve (KWh)
"""

plt.figure(figsize=(10, 6))
plt.scatter(data['Wind Speed (m/s)'], data['Theoretical_Power_Curve (KWh)'], s=10, alpha=0.5, label='Theoretical Power Curve')
plt.xlabel('Wind Speed (m/s)')
plt.ylabel('Power (kW)')
plt.title('Theoretical Power Curves')
plt.legend()
plt.grid(True)
plt.show()

"""Wind Speed (m/s) dan LV ActivePower (kW)"""

plt.figure(figsize=(10, 6))
plt.scatter(data['Wind Speed (m/s)'], data['LV ActivePower (kW)'], s=10, alpha=0.5, label='Actual Power Curve')
plt.xlabel('Wind Speed (m/s)')
plt.ylabel('Power (kW)')
plt.title('Actual Power Curves')
plt.legend()
plt.grid(True)
plt.show()

"""Dari kurva yang terbentuk, dapat dilihat adanya batas kecepatan angin minimum dan maksimum agar turbin dapat memproduksi energi listrik"""

min_speed = data[data['Theoretical_Power_Curve (KWh)'] > 0]['Wind Speed (m/s)'].min()
min_speed = round(min_speed, 1)
print("Minimum Wind Speed:", min_speed)

# mencari kecepatan minimum yang dapat mencapai daya maksimum
max_power = data['LV ActivePower (kW)'].max()
min_speed_max_power = data[data['LV ActivePower (kW)'] == max_power]['Wind Speed (m/s)'].min()
min_speed_max_power = round(min_speed_max_power, 1)
print("Minimum Wind Speed to reach Maximum Power:", min_speed_max_power)

"""##### Analisis arah angin"""

# Distribusi arah angin berdasarkan jam
plt.figure(figsize=(10, 5))
plt.scatter(data['Wind Direction (°)'], data['Hour'], alpha=0.2)
plt.title('Wind Direction Distribution Hourly')
plt.xlabel('Wind Direction (°)')
plt.xticks(list(range(0, 365, 15)))
plt.ylabel('Hour')
plt.grid(True)
plt.show()

"""Dapat dilihat bahwa mekanisme turbin menangkap hampir seluruh arah angin (0-360 derajat)"""

# Wind Direction and Actual Power
plt.figure(figsize=(10, 6))
plt.scatter(data['Wind Direction (°)'], data['LV ActivePower (kW)'], s=10, alpha=0.5, label='Wind Direction')
plt.xlabel('Wind Direction (°)')
plt.ylabel('LV ActivePower (kW)')
plt.title('Wind Direction and Power Generated')
plt.legend()
plt.grid(True)
plt.show()

"""Dari grafik dapat dilihat bahwa terdapat arah angin yang paling optimal yaitu disekitar 30-75 derajat dan 180 - 210 derajat."""

# Wind speed and Wind Direction
plt.figure(figsize=(10, 6))
plt.scatter(data['Wind Direction (°)'], data['Wind Speed (m/s)'], s=10, alpha=0.5, label='Theoretical Power Curve')
plt.xlabel('Wind Direction (°)')
plt.ylabel('Wind Speed (m/s)')
plt.title('Wind Direction and Wind Speed')
plt.legend()
plt.grid(True)
plt.show()

"""Jika dihubungkan dengan grafik sebelumnya, dapat dilihat bahwa pada arah angin yang menghasilkan energi maksimal juga memiliki kecepatan angin tinggi.

Hal ini juga mengindikasikan penempatan turbin yang optimal dengan kondisi angin pada wilayah Izmir, Turki

##### Heatmap
"""

data_numeric = data[observed_columns]

plt.figure(figsize=(10, 8))
sns.heatmap(data_numeric.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap of Numerical Features')
plt.show()

"""Dari heatmap, fitur yang paling signifikan terhadap PCOS_Diagnosis yaitu Menstrual_Irregularity dan BMI.

# Data Preparation
"""

data = data.set_index('Date/Time')
data.head()

"""### Normalisasi"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaler.fit(data[observed_columns])
data_scaled_observed = scaler.transform(data[observed_columns])

data_scaled = pd.DataFrame(data_scaled_observed, columns=observed_columns, index=data.index)
data_scaled = pd.concat([data_scaled, data.drop(observed_columns, axis=1)], axis=1)

data_scaled.head()

"""### Splitting Data

Dataset dibagi menjadi 80% data pelatihan dan 20% data pengujian atau validation data untuk lebih menilai kinerja model
"""

X = data.drop(columns=['LV ActivePower (kW)'])
y = data['LV ActivePower (kW)']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

print(f'Shape of training data: {X_train.shape}')
print(f'Shape of test data: {X_test.shape}')

"""# Modelling"""

!pip install xgboost catboost

from sklearn.ensemble import GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor,ExtraTreesRegressor,AdaBoostRegressor
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from xgboost import XGBRegressor,XGBRFRegressor
from catboost import CatBoostRegressor

"""### Base Models"""

models=[
    GradientBoostingRegressor(random_state=42),
    SVR(),
    RandomForestRegressor(random_state=42),
    LinearRegression(),
    ExtraTreesRegressor(random_state=42),
    AdaBoostRegressor(random_state=42),
    DecisionTreeRegressor(random_state=42),
    XGBRegressor(random_state=42),
    XGBRFRegressor(random_state=42),
    CatBoostRegressor(random_state=42)
]

model_name=[]
r2score=[]
rmse=[]
mae=[]
mape=[]

for model in models:
    model_name.append(model.__class__.__name__)
    model.fit(X_train,y_train)
    y_pred=model.predict(X_test)
    r2score.append(r2_score(y_test,y_pred))
    rmse.append(np.sqrt(mean_squared_error(y_test,y_pred)))
    mae.append(mean_absolute_error(y_test,y_pred))
    mape.append(mean_absolute_percentage_error(y_test,y_pred))

score_df = pd.DataFrame({'model':model_name,'r2_score':r2score,'rmse':rmse,'mae':mae,'mape':mape})
score_df

"""# Evaluation"""

score_df.sort_values(by='r2_score',ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='model', y='r2_score', data=score_df)
plt.xticks(rotation=90)
plt.title('R2 Score')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='model', y='rmse', data=score_df)
plt.xticks(rotation=90)
plt.title('RMSE')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='model', y='mae', data=score_df)
plt.xticks(rotation=90)
plt.title('MAE')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='model', y='mape', data=score_df)
plt.xticks(rotation=90)
plt.title('MAPE')
plt.tight_layout()
plt.show()

"""dari analisis metrik yang diperoleh, yang paling optimal yaitu model CatBoostRegressor(random_state=42)"""

best_model = CatBoostRegressor(random_state=42)

"""### Fine Tuning

Dilakukan hyperparameter fine tuning untuk meningkatkan performa model
"""

from sklearn.model_selection import RandomizedSearchCV

from sklearn.metrics import make_scorer
def rmse(y_true, y_pred):
    return np.sqrt(mean_squared_error(y_true, y_pred))

rmse_scorer = make_scorer(rmse, greater_is_better=False)

param_grid = {
    'learning_rate': np.linspace(0.01, 0.3, 10),
    'iterations': [100, 200, 300, 400, 500],  # Equivalent to n_estimators
    'depth': [3, 5, 7, 9],  # Equivalent to max_depth
    'subsample': np.linspace(0.5, 1.0, 6),
    'colsample_bylevel': np.linspace(0.5, 1.0, 6),  # Equivalent to colsample_bytree
    'l2_leaf_reg': np.linspace(0.01, 1.0, 10),  # Equivalent to reg_lambda
    'min_child_samples': [1, 5, 10, 15],  # Equivalent to min_child_weight
}

random_search = RandomizedSearchCV(estimator=best_model,
                                 param_distributions=param_grid,
                                 n_iter=50,
                                 scoring=rmse_scorer,
                                 cv=5,
                                 verbose=1,
                                 random_state=42,
                                 n_jobs=-1
                                 )

random_search.fit(X_train, y_train)

best_params = random_search.best_params_
best_params

best_score = random_search.best_score_
best_score

best_model = CatBoostRegressor(**best_params)
best_model.fit(X_train, y_train,verbose=False)
y_pred_test= best_model.predict(X_test)

print("R2 Score:", r2_score(y_test, y_pred_test))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred_test)))
print("MAE:", mean_absolute_error(y_test, y_pred_test))
print("MAPE:", mean_absolute_percentage_error(y_test, y_pred_test))

"""### Prediction Plot"""

y_pred = best_model.predict(X_test)

data_pred = pd.DataFrame(y_pred, columns=['Predictions'])
data_pred['LV ActivePower (kW)'] = y_test.values
data_pred['Date/Time'] = X_test.index
data_pred = pd.merge(X_test, data_pred, left_index=True, right_on='Date/Time', how='inner')
data_pred.head()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Wind Speed (m/s)', y='LV ActivePower (kW)', data=data_pred, label='Actual')
sns.scatterplot(x='Wind Speed (m/s)', y='Predictions', data=data_pred, label='Prediction')
sns.lineplot(x='Wind Speed (m/s)', y='Theoretical_Power_Curve (KWh)', data=data_pred, label='Theoritical')
plt.xlabel('Wind Speed (m/s)')
plt.ylabel('Power (kW)')
plt.title('Actual Power Curves')
plt.legend()
plt.grid(True)
plt.show()